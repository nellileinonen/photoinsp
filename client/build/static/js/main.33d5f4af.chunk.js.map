{"version":3,"sources":["redux/photosSlice.ts","redux/rootReducer.ts","store.ts","components/photolist/Thumbnail.tsx","components/photolist/Photolist.tsx","App.tsx","index.tsx"],"names":["fetchPhotos","createAsyncThunk","a","axios","get","response","console","log","data","newPhotos","map","item","id","urls","thumb","alt_description","photosSlice","createSlice","name","initialState","photos","status","error","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","concat","rejected","rootReducer","combineReducers","photosReducer","store","configureStore","reducer","Thumbnail","photoId","alt","href","src","Photolist","content","dispatch","useDispatch","useSelector","photosStatus","useEffect","photo","onClick","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAkBaA,EAAcC,YAAiB,qBAAD,sBAAuB,8BAAAC,EAAA,sEACzCC,IAAMC,IAAI,WAD+B,cAC1DC,EAD0D,OAEhEC,QAAQC,IAAI,iCAAkCF,EAASG,MACjDC,EAAYJ,EAASG,KAAKE,KAAI,SAACC,GAAD,MAClC,CACE,QAAWA,EAAKC,GAChB,MAASD,EAAKE,KAAKC,MACnB,IAAOH,EAAKI,oBAGhBT,QAAQC,IAAI,6BAA8BE,GAVsB,kBAWzDA,GAXyD,4CA0CnDO,EAzBKC,YAAY,CAC9BC,KAAM,SACNC,aA5BmB,CACnBC,OAAQ,GACRC,OAAQ,OACRC,MAAO,MA0BPC,SAAU,GAEVC,cAAe,SAAAC,GACbA,EACCC,QAAQ1B,EAAY2B,SAAS,SAACC,EAAOC,GACpCD,EAAMP,OAAS,UACfO,EAAMN,MAAQ,QAEfI,QAAQ1B,EAAY8B,WAAW,SAACF,EAAOC,GACtCD,EAAMP,OAAS,YACff,QAAQC,IAAI,oCAAqCsB,EAAOE,SACxDH,EAAMR,OAASQ,EAAMR,OAAOY,OAAOH,EAAOE,SAE1CzB,QAAQC,IAAI,kCAAmCqB,EAAMR,WAEtDM,QAAQ1B,EAAYiC,UAAU,SAACL,EAAOC,GACrCD,EAAMP,OAAS,SACfO,EAAMN,MAAQO,EAAOE,cAK3B,QCzDaG,EAAcC,YAAgB,CACzCf,OAAQgB,ICGKC,EAJDC,YAAe,CAAEC,QAASL,ICWzBM,G,YAX4D,SAAC,GAA4B,EAA1BC,QAA2B,IAAlB3B,EAAiB,EAAjBA,MAAO4B,EAAU,EAAVA,IAC5F,OACE,8BAEE,mBAAGC,KAAK,kBAAR,SACE,qBAAKC,IAAK9B,EAAO4B,IAAKA,UCwCfG,EAxCa,WAC1B,IAaIC,EAbEC,EAAWC,cAEX5B,EAAS6B,aAAY,SAACrB,GAAD,OAAsBA,EAAMR,OAAOA,UACxD8B,EAAeD,aAAY,SAACrB,GAAD,OAAsBA,EAAMR,OAAOC,UAC9DC,EAAQ2B,aAAY,SAACrB,GAAD,OAAsBA,EAAMR,OAAOE,SAE7D6B,qBAAU,WAEa,SAAjBD,GACFH,EAAS/C,OAEV,CAACkD,EAAcH,IAGG,YAAjBG,EACFJ,EAAU,6CACgB,cAAjBI,GACT5C,QAAQC,IAAIa,GACZ0B,EAAU1B,EAAOV,KAAI,SAAC0C,GAAD,OAEnB,aADA,CACC,EAAD,CAA+BX,QAASW,EAAMX,QAAS3B,MAAOsC,EAAMtC,MAAO4B,IAAKU,EAAMV,KAAtEU,EAAMX,aAEE,WAAjBS,IACTJ,EAAU,8BAAMxB,KAQlB,OACE,gCACGwB,EACD,wBAAQO,QAAS,WANnB/C,QAAQC,IAAI,wBAMV,2BC9BS+C,EATO,WACpB,OACE,sBAAKC,UAAU,MAAf,UACE,2CACA,cAAC,EAAD,QCCNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUrB,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJsB,SAASC,eAAe,W","file":"static/js/main.33d5f4af.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\ninterface PhotosState {\n  photos: any, //[],\n  status: 'idle' | 'loading' | 'succeeded' | 'failed',\n  error: any //string | null\n}\n\nconst initialState = {\n  photos: [],\n  status: 'idle',\n  error: null,\n} as PhotosState;\n\n/* Fetch photos from API \n * Generated action types will start with 'photos/fetchPhotos'\n */\nexport const fetchPhotos = createAsyncThunk('photos/fetchPhotos', async () => {\n  const response = await axios.get('/photos');\n  console.log('in photosSlice response data: ', response.data);\n  const newPhotos = response.data.map((item: any) => (\n    {\n      'photoId': item.id,\n      'thumb': item.urls.thumb,\n      'alt': item.alt_description\n    }\n  ));\n  console.log('in photosSlice newPhotos: ', newPhotos);\n  return newPhotos;\n});\n\n/*\n *\n */\nconst photosSlice = createSlice({\n  name: 'photos',\n  initialState,\n  reducers: {},\n  // Use \"builder callback\" syntax as it is recommended with TypeScript\n  extraReducers: builder => {\n    builder\n    .addCase(fetchPhotos.pending, (state, action) => {\n      state.status = 'loading';\n      state.error = null;\n    })\n    .addCase(fetchPhotos.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      console.log('action payload in extra reducer: ', action.payload);\n      state.photos = state.photos.concat(action.payload);\n      //state.photos = action.payload;\n      console.log('state.photos in extra reducer: ', state.photos);\n    })\n    .addCase(fetchPhotos.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload;\n    })\n  },\n});\n\nexport default photosSlice.reducer;","import { combineReducers } from '@reduxjs/toolkit';\nimport photosReducer from './photosSlice'; \n\nexport const rootReducer = combineReducers({\n  photos: photosReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { rootReducer } from './redux/rootReducer';\n\nconst store = configureStore({ reducer: rootReducer });\n\n//console.log('store state: ', store.getState());\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>\n","import React from 'react';\n\n// TODO All the info as props or fetched from store directly by photoId\nconst Thumbnail: React.FC<{photoId: string, thumb: string, alt: string}> = ({ photoId, thumb, alt }) => {\n  return (\n    <div>\n      {/* TODO link to Photo info page */}\n      <a href='/photo/:photoId'>\n        <img src={thumb} alt={alt} />\n      </a>\n    </div>\n  );\n}\n\nexport default Thumbnail;","import React, { useEffect } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchPhotos } from '../../redux/photosSlice';\nimport { RootState } from '../../redux/rootReducer';\n\nimport Thumbnail from './Thumbnail';\n\nconst Photolist: React.FC = () => {\n  const dispatch = useDispatch();\n  \n  const photos = useSelector((state: RootState) => state.photos.photos);\n  const photosStatus = useSelector((state: RootState) => state.photos.status);\n  const error = useSelector((state: RootState) => state.photos.error);\n\n  useEffect(() => {\n    // Only fetch initial list of photos once\n    if (photosStatus === 'idle') {\n      dispatch(fetchPhotos());\n    }\n  }, [photosStatus, dispatch]);\n\n  let content;\n  if (photosStatus === 'loading') {\n    content = <div>Loading...</div>;\n  } else if (photosStatus === 'succeeded') {\n    console.log(photos);\n    content = photos.map((photo: any) => (\n      // TODO All the info as props or fetched from store in Thumbnail directly by photoId\n      <Thumbnail key={photo.photoId} photoId={photo.photoId} thumb={photo.thumb} alt={photo.alt} />\n    ));\n  } else if (photosStatus === 'failed') {\n    content = <div>{error}</div>;\n  }\n\n  // TODO fetch more photos\n  const handleClick = () => {\n    console.log('show me more photos');\n  }\n\n  return (\n    <div>\n      {content}\n      <button onClick={() => handleClick()}>Show more</button>\n    </div>\n  );\n}\n\nexport default Photolist;","import React from 'react';\nimport './App.css';\nimport Photolist from './components/photolist/Photolist';\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <h1>Photoinsp</h1>\n      <Photolist />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}