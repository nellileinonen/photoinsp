{"version":3,"sources":["redux/photolistSlice.ts","redux/photoSlice.ts","redux/photographerSlice.ts","redux/photographerPhotosSlice.ts","redux/rootReducer.ts","store.ts","components/header/navigation/Navigation.tsx","components/photolist/thumbnail/Thumbnail.tsx","components/photolist/thumbnailList/ThumbnailList.tsx","components/photolist/showMore/ShowMore.tsx","components/statusIndicators/loading/Loading.tsx","components/statusIndicators/error/Error.tsx","components/photolist/Photolist.tsx","components/header/modal/Modal.tsx","components/header/info/Info.tsx","components/photo/photoMeta/PhotoMeta.tsx","components/photo/photographerIntro/PhotographerIntro.tsx","components/photo/Photo.tsx","components/header/Header.tsx","components/noMatch/NoMatch.tsx","components/photographer/photographerPhotolist/PhotographerPhotolist.tsx","components/photographer/Photographer.tsx","RootRoutes.tsx","App.tsx","index.tsx"],"names":["fetchPhotos","createAsyncThunk","pageNumber","a","axios","get","params","page","response","newPhotos","data","map","item","alt_description","id","urls","thumb","photolistSlice","createSlice","name","initialState","photolist","status","error","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","Array","isArray","payload","filter","thumbnail","find","photoId","length","concat","rejected","fetchPhoto","date","Date","created_at","createdAt","toLocaleString","newPhoto","full","regular","user","profile_image","small","username","photoSlice","photo","fetchPhotographer","newPhotographer","photographerId","firstName","first_name","lastName","last_name","bio","totalPhotos","total_photos","totalCollections","total_collections","profileImg","large","photographerPhotosUrl","links","photos","photographerSlice","photographer","fetchPhotographerPhotolist","newPhotographerPhotolist","photographerPhotolistSlice","rootReducer","combineReducers","photolistReducer","photoReducer","photographerReducer","photographerPhotolist","photographerPhotolistReducer","store","configureStore","reducer","Navigation","location","useLocation","atRoot","pathname","to","className","background","InfoCircleOutlined","Thumbnail","thumbUrl","alt","src","ThumbnailList","thumbnails","ShowMore","handleShowMore","onClick","Loading","LoadingOutlined","Error","errorMsg","Photolist","dispatch","useDispatch","useSelector","photosStatus","useEffect","Modal","children","history","useHistory","modalRef","useRef","closeModal","replace","handleClickOutside","e","current","contains","target","document","addEventListener","removeEventListener","keyListener","key","role","aria-modal","ref","Info","href","rel","PhotoMeta","fullUrl","PhotographerIntro","userImgUrl","userRealName","Photo","photoStatus","regularUrl","Header","NoMatch","PhotographerPhotolist","Photographer","photographerStatus","RootRoutes","param","undefined","pathElements","split","pop","exact","path","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.704e6c2f.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport interface ThumbnailType {\n  alt: string,\n  photoId: string,\n  thumbUrl: string\n}\n\nexport interface PhotolistState {\n  photolist: ThumbnailType[],\n  // Username is defined if it's a photographer's photo list\n  username?: string,\n  status: 'idle' | 'loading' | 'succeeded' | 'failed',\n  page: number,\n  error: string | null\n}\n\nconst initialState = {\n  photolist: [],\n  status: 'idle',\n  page: 1,\n  error: null,\n} as PhotolistState;\n\n/* Fetch photos from API.\n * Generated action types start with 'photolist/fetchPhotos'\n */\nexport const fetchPhotos = createAsyncThunk('photolist/fetchPhotos', async (pageNumber: number) => {\n  const response = await axios.get('/photolist', {\n    params: {\n      page: pageNumber\n    }\n  });\n\n  //const newPhotos: PhotolistState = response.data.map((item: any) => (\n  const newPhotos: ThumbnailType[] = response.data.map((item: any) => (\n    {\n      'alt': item.alt_description,\n      'photoId': item.id,\n      'thumbUrl': item.urls.thumb,\n    }\n  ));\n  return newPhotos;\n});\n\n/*\n * createSlice automatically generates action creators and action types\n * that correspond to the reducers and state\n */\nconst photolistSlice = createSlice({\n  name: 'photolist',\n  initialState,\n  reducers: {},\n  // Use \"builder callback\" syntax as it is recommended with TypeScript\n  extraReducers: builder => {\n    builder\n    .addCase(fetchPhotos.pending, (state, action) => {\n      state.status = 'loading';\n      state.error = null;\n    })\n    .addCase(fetchPhotos.fulfilled, (state, action) => {\n      // Photo fetching was successful if the action payload is an array\n      if (Array.isArray(action.payload)) {\n\n        /* Data in Unsplash updates often and same photos can be fetched multiple times if\n         * the app is left open and after a while the user continues browsing where they left.\n         * Check that new photos fetched are not duplicates of the ones already visible.\n         */\n        const notInPhotolist = (thumbnail: ThumbnailType) => {\n          const found = state.photolist.find(item => item.photoId === thumbnail.photoId);\n          if (typeof found === 'undefined') {\n            return true;\n          } else {\n            return false;\n          }\n        }\n        const newPhotos = action.payload.filter((item: ThumbnailType) => notInPhotolist(item));\n\n        if (newPhotos.length > 0) {\n          // Update store state: status tells that the fetch succeeded, page tells the next page\n          // to be fetched and photos is the place for photos\n          state.status = 'succeeded';\n          state.page = state.page + 1;\n          state.photolist = state.photolist.concat(newPhotos);\n        } else {\n          state.status = 'failed';\n          state.error = 'Could not load photos. Please, refresh the page to get the newest content!';\n        }\n      } else {\n        // If action payload is something else than an array, fetch failed\n        state.status = 'failed';\n        state.error = 'Could not load photos.';\n      }\n    })\n    .addCase(fetchPhotos.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = 'Could not load photos.';\n    })\n  },\n});\n\nexport default photolistSlice.reducer;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\ninterface Photo  {\n  alt: string,\n  createdAt: string,\n  fullUrl: string,\n  photoId: string,\n  regularUrl: string,\n  thumbUrl: string,\n  userId: string,\n  userImgUrl: string,\n  userRealName: string,\n  username: string\n}\n\ninterface PhotoState {\n  photoId: string,\n  photo: Photo,\n  status: 'idle' | 'loading' | 'succeeded' | 'failed',\n  error: string | null\n}\n\nconst initialState = {\n  photoId: '',\n  photo: {},\n  status: 'idle',\n  error: null,\n} as PhotoState;\n\n/* Fetch a single photo from API.\n * Generated action types will start with 'photo/fetchPhoto'\n */\nexport const fetchPhoto = createAsyncThunk('photo/fetchPhoto', async (photoId: string) => {\n  const response = await axios.get(`/photolist/${photoId}`);\n  const data = response.data;\n\n  const date = new Date(data.created_at);\n  const createdAt = date.toLocaleString('en-BG');\n\n  const newPhoto: Photo = {\n    'alt': data.alt_description,\n    'createdAt': createdAt,\n    'fullUrl': data.urls.full,\n    'photoId': data.id,\n    'regularUrl': data.urls.regular,\n    'thumbUrl': data.urls.thumb,\n    'userId': data.user.id,\n    'userImgUrl': data.user.profile_image.small,\n    'userRealName': data.user.name,\n    'username': data.user.username\n  };\n\n  return newPhoto;\n});\n\n/*\n * createSlice automatically generates action creators and action types\n * that correspond to the reducers and state\n */\nconst photoSlice = createSlice({\n  name: 'photo',\n  initialState,\n  reducers: {},\n  // Use \"builder callback\" syntax as it is recommended with TypeScript\n  extraReducers: builder => {\n    builder\n    .addCase(fetchPhoto.pending, (state, action) => {\n      state.status = 'loading';\n      state.error = null;\n    })\n    .addCase(fetchPhoto.fulfilled, (state, action) => {\n      // Update store state: status tells that the fetch succeeded, photoId is the id of the fetched\n      // photo and photo contains all the necessary info of the photo\n      state.status = 'succeeded';\n      state.photoId = action.payload.photoId;\n      state.photo = action.payload;\n    })\n    .addCase(fetchPhoto.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = 'Could not load photo.';\n    })\n  },\n});\n\nexport default photoSlice.reducer;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\ninterface Photographer  {\n  photographerId: string,\n  username: string,\n  firstName: string,\n  lastName: string,\n  bio: string,\n  totalPhotos: number,\n  totalCollections: number,\n  profileImg: string,\n  photographerPhotosUrl: string\n}\n\ninterface PhotographerState {\n  photographer: Photographer,\n  status: 'idle' | 'loading' | 'succeeded' | 'failed',\n  error: string | null\n}\n\nconst initialState = {\n  photographer: {},\n  status: 'idle',\n  error: null\n} as PhotographerState;\n\n/* Fetch info of photographer from API.\n * Generated action types will start with 'photographer/fetchPhotographer'\n */\nexport const fetchPhotographer = createAsyncThunk('photographer/fetchPhotographer',\n  async (username: string) => {\n\n  const response = await axios.get(`/photographer/${username}`);\n  const data = response.data;\n\n  const newPhotographer: Photographer = {\n    photographerId: data.id,\n    username: username,\n    firstName: data.first_name,\n    lastName: data.last_name,\n    bio: data.bio,\n    totalPhotos: data.total_photos,\n    totalCollections: data.total_collections,\n    profileImg: data.profile_image.large,\n    photographerPhotosUrl: data.links.photos\n  };\n\n  return newPhotographer;\n});\n\n/*\n * createSlice automatically generates action creators and action types\n * that correspond to the reducers and state\n */\nconst photographerSlice = createSlice({\n  name: 'photographer',\n  initialState,\n  reducers: {},\n  // Use \"builder callback\" syntax as it is recommended with TypeScript\n  extraReducers: builder => {\n    builder\n    .addCase(fetchPhotographer.pending, (state, action) => {\n      state.status = 'loading';\n      state.error = null;\n    })\n    .addCase(fetchPhotographer.fulfilled, (state, action) => {\n      // Update store state: status tells that the fetch succeeded and\n      // photographer contains all the necessary info of the photographer\n      state.status = 'succeeded';\n      state.photographer = action.payload;\n    })\n    .addCase(fetchPhotographer.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = 'Could not load photographer info.';\n    })\n  },\n});\n\nexport default photographerSlice.reducer;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { ThumbnailType, PhotolistState } from './photolistSlice';\n\nconst initialState = {\n  photolist: [],\n  username: '',\n  status: 'idle',\n  // TODO Maybe fetch photos from multiple pages in the future\n  page: 1,\n  error: null,\n} as PhotolistState;\n\n/* Fetch photographer's photos from API.\n * Generated action types will start with 'photographer/fetchPhotographerPhotolist'\n */\nexport const fetchPhotographerPhotolist =\n  createAsyncThunk('photographer/fetchPhotographerPhotolist',\n  async (username: string) => {\n\n  const response = await axios.get(`/photographer/${username}/photos`);\n\n  const newPhotographerPhotolist: ThumbnailType[] = response.data.map((item: any) => (\n    {\n      'alt': item.alt_description,\n      'photoId': item.id,\n      'thumbUrl': item.urls.thumb,\n    }\n  ));\n\n  return newPhotographerPhotolist;\n});\n\n/*\n * createSlice automatically generates action creators and action types\n * that correspond to the reducers and state\n */\nconst photographerPhotolistSlice = createSlice({\n  name: 'photographerPhotolist',\n  initialState,\n  reducers: {},\n  // Use \"builder callback\" syntax as it is recommended with TypeScript\n  extraReducers: builder => {\n    builder\n    .addCase(fetchPhotographerPhotolist.pending, (state, action) => {\n      state.status = 'loading';\n      state.error = null;\n    })\n    .addCase(fetchPhotographerPhotolist.fulfilled, (state, action) => {\n      // Update store state: status tells that the fetch succeeded and\n      // photographer contains all the necessary info of the photographer\n      state.status = 'succeeded';\n      state.photolist = action.payload;\n    })\n    .addCase(fetchPhotographerPhotolist.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = 'Could not load photographer\\'s photos.';\n    })\n  },\n});\n\nexport default photographerPhotolistSlice.reducer;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport photolistReducer from './photolistSlice';\nimport photoReducer from './photoSlice';\nimport photographerReducer from './photographerSlice';\nimport photographerPhotolistReducer from './photographerPhotosSlice';\n\nexport const rootReducer = combineReducers({\n  photolist: photolistReducer,\n  photo: photoReducer,\n  photographer: photographerReducer,\n  photographerPhotolist: photographerPhotolistReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { rootReducer } from './redux/rootReducer';\n\nconst store = configureStore({ reducer: rootReducer });\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>;\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { InfoCircleOutlined } from '@ant-design/icons';\nimport './Navigation.scss';\n\nconst Navigation: React.FC = () => {\n  const location = useLocation();\n  const atRoot = location.pathname === '/';\n\n  return (\n    <nav>\n      <Link to='/'\n        className='home'\n      >\n        Photoinsp\n      </Link>\n      {atRoot &&\n      <Link to={{\n        pathname: '/info',\n        state: { background: location }\n        }}\n        className='info'\n      >\n        <InfoCircleOutlined />\n      </Link>\n      }\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\nimport './Thumbnail.scss';\n\nconst Thumbnail: React.FC<{ thumbUrl: string, alt: string }> = ({ thumbUrl, alt }) => {\n  return (\n    <img src={thumbUrl} alt={alt} className='thumbnail'/>\n  );\n};\n\nexport default Thumbnail;\n","import React from 'react';\nimport { ThumbnailType } from '../../../redux/photolistSlice';\nimport { Link } from 'react-router-dom';\nimport Thumbnail from '../thumbnail/Thumbnail';\nimport './ThumbnailList.scss';\n\nconst ThumbnailList: React.FC<{ thumbnails: ThumbnailType[] }> = ({ thumbnails }) => {\n  return (\n    <div className='flex-container'>\n      {thumbnails.map((photo: ThumbnailType) =>\n      <Link\n        key={photo.photoId}\n        to={{pathname: `/photos/${photo.photoId}`}}\n        className='flex-item'\n      >\n        <Thumbnail thumbUrl={photo.thumbUrl} alt={photo.alt} />\n      </Link>\n      )}\n    </div>\n  );\n};\n\nexport default ThumbnailList;\n","import React from 'react';\nimport './ShowMore.scss';\n\nconst ShowMore: React.FC<{handleShowMore: Function}> = ({ handleShowMore }) => {\n  return (\n    <div className='show-more'>\n      <button onClick={() => handleShowMore()} className='show-more-button'>Show more</button>\n    </div>\n  );\n};\n\nexport default ShowMore;\n","import React from 'react';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport './Loading.scss';\n\nconst Loading: React.FC = () => {\n  return (\n    <div className='loading'>\n      <LoadingOutlined />\n    </div>\n  );\n};\n\nexport default Loading;\n","import React from 'react';\nimport './Error.scss';\n\nconst Error: React.FC<{ errorMsg: string | null }> = ({ errorMsg }) => {\n  return (\n    <div className='error'>\n      {errorMsg !== null ?\n      <p>{errorMsg}</p> :\n      <p>Could not load content.</p> \n      }\n    </div>\n  );\n};\n\nexport default Error;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchPhotos } from '../../redux/photolistSlice';\nimport { RootState } from '../../redux/rootReducer';\nimport ThumbnailList from './thumbnailList/ThumbnailList';\nimport ShowMore from './showMore/ShowMore';\nimport Loading from '../statusIndicators/loading/Loading';\nimport Error from '../statusIndicators/error/Error';\n\nconst Photolist: React.FC = () => {\n  const dispatch = useDispatch();\n  \n  const photos = useSelector((state: RootState) => state.photolist.photolist);\n  const photosStatus = useSelector((state: RootState) => state.photolist.status);\n  const pageNumber = useSelector((state: RootState) => state.photolist.page);\n  const error = useSelector((state: RootState) => state.photolist.error);\n\n  useEffect(() => {\n    // Only fetch initial list of photos once\n    if (photosStatus === 'idle') {\n      dispatch(fetchPhotos(pageNumber));\n    }\n  }, [photosStatus, pageNumber, dispatch]);\n\n  // Dispatch action to fetch photos\n  const handleShowMore = () => {\n    dispatch(fetchPhotos(pageNumber));\n  };\n\n  return (\n    <div>\n\n      <ThumbnailList thumbnails={photos} />\n\n      {photosStatus === 'loading' &&\n      <Loading />}\n\n      {photosStatus === 'succeeded' &&\n      <ShowMore handleShowMore={handleShowMore} />}\n\n      {photosStatus === 'failed' &&\n      <Error errorMsg={error} />}\n\n    </div>\n  );\n};\n\nexport default Photolist;\n","import React, { useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './Modal.scss';\n\n/*\n * TODO\n * 1) Trap focus in modal: https://tinloof.com/blog/how-to-create-an-accessible-react-modal/\n * 2) Use Portal to place the modal in the right place in DOM tree (after navigation bar).\n *    This is necessary so that keyboard focus will be in logical place when modal opens.\n *    Now the modal is at the end of the page. Make sure you can still send link to /info\n *    and that works with Portal.\n *    https://levelup.gitconnected.com/lets-build-a-functional-reusable-modal-component-in-react-with-portals-edff0b8d4bf7\n */\n\nconst Modal: React.FC = ({ children }) => {\n  const history = useHistory();\n  const modalRef = useRef<HTMLDivElement>(null);\n\n  /* Close modal by navigating to the root */\n  const closeModal = () => {\n    history.replace({pathname: '/'});\n  };\n\n  /* If mouse is clicked outside modal, close modal */\n  const handleClickOutside = (e: MouseEvent) => {\n    if (modalRef.current !== null && (!modalRef.current.contains(e.target as Element))) {\n      closeModal();\n    }\n  };\n\n  /* Close modal if mouse clicked outside of it */\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  });\n\n  /* Close modal with ESC */\n  useEffect(() => {\n    function keyListener(e: KeyboardEvent) {\n      if (e.key === 'Escape') {\n        closeModal();\n      }\n    }\n    document.addEventListener('keydown', keyListener);\n    return () => document.removeEventListener('keydown', keyListener);\n  });\n\n  return (\n    <div className='modal-bg' role='dialog' aria-modal='true'>\n      <div ref={modalRef} className='modal-wrapper'>\n        <button onClick={() => closeModal()} className='close'>X</button>\n        {children}\n      </div>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React from 'react';\nimport './Info.scss';\n\nconst Info: React.FC = () => {\n  return (\n    <div className='info-content'>\n      <h3>What is this?</h3>\n      <p>\n        This app is created for you to enjoy beautiful photographs shared by people from\n        all around the world.\n      </p>\n      <p>\n        Here you can calm down and focus on the essential - the photographs.\n        There are no notifications or anything else that could distract you.\n      </p>\n      <h3>Whose photos are these?</h3>\n      <p>\n        This app fetches data from\n        {' '}\n        <a href='https://unsplash.com/developers' target='_blank' rel='noreferrer'>\n          Unsplash API\n        </a>. Every photo view has a link to the original full-sized photo.\n      </p>\n      <h3>Who made this?</h3>\n      <p>\n        The app is created by a hobbyist web developer\n        {' '}\n        <a href='https://github.com/nellileinonen' target='_blank'  rel='noreferrer'>\n          Nelli Leinonen\n        </a>.\n        {' '}\n        Source code on\n        {' '}\n        <a href='https://github.com/nellileinonen/photoinsp' target='_blank' rel='noreferrer'>\n          GitHub\n        </a>.\n      </p>\n    </div>\n  );\n};\n\nexport default Info;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../redux/rootReducer';\nimport './PhotoMeta.scss';\n\nconst PhotoMeta: React.FC = () => {\n  const createdAt = useSelector((state: RootState) => state.photo.photo.createdAt);\n  const fullUrl = useSelector((state: RootState) => state.photo.photo.fullUrl);\n\n  return (\n    <div className='photo-meta'>\n      {createdAt}\n      <br/>\n      <a href={fullUrl} target='_blank' rel='noreferrer'>Full-sized</a>\n    </div>\n  );\n};\n\nexport default PhotoMeta;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../redux/rootReducer';\nimport './PhotographerIntro.scss';\n\nconst PhotographerIntro: React.FC = () => {\n  const userImgUrl = useSelector((state: RootState) => state.photo.photo.userImgUrl);\n  const userRealName = useSelector((state: RootState) => state.photo.photo.userRealName);\n  const username = useSelector((state: RootState) => state.photo.photo.username);\n\n  return (\n    <div className='photographer-intro'>\n      <div>\n        <img src={userImgUrl} alt='' className='photographer-img'/>\n      </div>\n      <div className='photographer-name'>\n        <p>\n          <Link to={{ pathname: `/photographer/${username}` }} >\n            {userRealName}\n          </Link>\n          <br/>\n          Username: {username}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default PhotographerIntro;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchPhoto } from '../../redux/photoSlice';\nimport { RootState } from '../../redux/rootReducer';\nimport PhotoMeta from './photoMeta/PhotoMeta';\nimport PhotographerIntro from './photographerIntro/PhotographerIntro';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport './Photo.scss';\n\nconst Photo: React.FC<{photoId: string}> = ({ photoId }) => {\n  const dispatch = useDispatch();\n\n  const photo = useSelector((state: RootState) => state.photo.photo);\n  const photoStatus = useSelector((state: RootState) => state.photo.status);\n  const error = useSelector((state: RootState) => state.photo.error);\n\n  useEffect(() => {\n    dispatch(fetchPhoto(photoId));\n  }, [dispatch, photoId]);\n\n  return (\n    <div className='photo-view'>\n\n      {photoStatus === 'loading' &&\n      <LoadingOutlined className='loading'/>}\n\n      {photoStatus === 'succeeded' &&\n      <>\n        <img src={photo.regularUrl} alt={photo.alt} className='regular-photo'/>\n        <PhotoMeta />\n        <PhotographerIntro />\n      </>}\n\n      {photoStatus === 'failed' &&\n      <div className='error'>{error}</div>}\n\n    </div>\n  );\n};\n\nexport default Photo;\n","import React from 'react';\nimport './Header.scss';\n\nconst Header: React.FC = () => {\n  return (\n    <header>\n      <h1>Photoinsp</h1>\n      <h2>Browse photos, relax and get inspired</h2>\n      <div className='divider'>\n        <span className='line'></span>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './NoMatch.scss';\n\nconst NoMatch: React.FC = () => {\n  return (\n    <div className='no-match'>\n      <p>\n        The page you requested could not be found.\n        <br/>\n        Please, continue browsing to the\n        {' '}\n        <Link to='/'>\n          front page\n        </Link>\n        .\n      </p>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchPhotographerPhotolist } from '../../../redux/photographerPhotosSlice';\nimport { RootState } from '../../../redux/rootReducer';\n// TODO Maybe fetch photos from multiple pages in the future\n//import ShowMore from '../../photolist/showMore/ShowMore';\nimport Loading from '../../statusIndicators/loading/Loading';\nimport Error from '../../statusIndicators/error/Error';\nimport ThumbnailList from '../../photolist/thumbnailList/ThumbnailList';\n\nconst PhotographerPhotolist: React.FC<{ username: string }> = ({ username }) => { \n  const dispatch = useDispatch();\n\n  const photos = useSelector((state: RootState) => state.photographerPhotolist.photolist);\n  const status = useSelector((state: RootState) => state.photographerPhotolist.status);\n  const error = useSelector((state: RootState) => state.photographerPhotolist.error);\n\n  useEffect(() => {\n    dispatch(fetchPhotographerPhotolist(username));\n  }, [dispatch, username]);\n\n  // TODO Maybe fetch photos from multiple pages in the future\n  /*\n  // Dispatch action to fetch more photos from the photographer\n  const handleShowMore = () => {\n    dispatch(fetchPhotographerPhotolist(username));\n  };\n  */\n\n  return (\n    <div className='photographer-photolist'>\n\n      <ThumbnailList thumbnails={photos} />\n\n      {status === 'loading' &&\n      <Loading />}\n\n      {/*\n      // TODO Maybe fetch photos from multiple pages in the future\n      status === 'succeeded' &&\n      <ShowMore handleShowMore={handleShowMore} />*/}\n\n      {status === 'failed' &&\n      <Error errorMsg={error} />}\n\n    </div>\n  );\n};\n\nexport default PhotographerPhotolist;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchPhotographer } from '../../redux/photographerSlice';\nimport { RootState } from '../../redux/rootReducer';\nimport PhotographerPhotolist from './photographerPhotolist/PhotographerPhotolist';\nimport Loading from '../statusIndicators/loading/Loading';\nimport Error from '../statusIndicators/error/Error';\nimport './Photographer.scss';\n\nconst Photographer: React.FC<{ username: string }> = ({ username }) => { \n  const dispatch = useDispatch();\n\n  const photographer = useSelector((state: RootState) => state.photographer.photographer);\n  const photographerStatus = useSelector((state: RootState) => state.photographer.status);\n  const error = useSelector((state: RootState) => state.photographer.error);\n\n  const firstName = photographer.firstName;\n  const lastName = photographer.lastName;\n  const name = `${firstName} ${lastName}`;\n  const bio = photographer.bio;\n  const totalPhotos = photographer.totalPhotos;\n  const totalCollections = photographer.totalCollections;\n  \n  useEffect(() => {\n    dispatch(fetchPhotographer(username));\n  }, [dispatch, username]);\n\n  return (\n    <div className='photographer-view'>\n\n      {photographerStatus === 'loading' &&\n      <Loading />}\n\n      {photographerStatus === 'succeeded' &&\n      <>\n        <div className='flex-container photographer-container'>\n          <div className='flex-item'>\n            <img src={photographer.profileImg} alt={name} className='profile-img'/>\n            <h2>\n              {firstName}\n              <br/>\n              {lastName}\n            </h2>\n          </div>\n          <div className='flex-item'>\n            <p>\n              {bio}\n            </p>\n            <p>\n              Username: {username}\n              <br/>\n              Photos: {totalPhotos}\n              <br/>\n              Collections: {totalCollections}\n            </p>\n          </div>\n        </div>\n        <PhotographerPhotolist username={username} />\n      </>}\n\n      {photographerStatus === 'failed' &&\n      <Error errorMsg={error} />}\n\n    </div>\n  );\n};\n\nexport default Photographer;\n","import React from 'react';\nimport { Redirect, Route, Switch, useLocation } from 'react-router-dom';\nimport Photolist from './components/photolist/Photolist';\nimport Modal from './components/header/modal/Modal';\nimport Info from './components/header/info/Info';\nimport Photo from './components/photo/Photo';\nimport Header from './components/header/Header';\nimport NoMatch from './components/noMatch/NoMatch';\nimport Photographer from './components/photographer/Photographer';\n\nconst RootRoutes = () => {\n  // TODO: use proper type\n  // Location unknown nowadays: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/41674\n  const location: any = useLocation();\n\n  const background = location.state && location.state.background;\n\n  let param = '';\n  if (typeof location.pathname !== undefined) {\n    const pathElements = location.pathname.split('/');\n    if (pathElements.length === 3 &&\n      (pathElements[1] === 'photos' || pathElements[1] === 'photographer')) {\n      param = pathElements.pop();\n    }\n  }\n\n  return (\n    <div>\n      <Switch location={background || location}>\n\n        <Route exact path=\"/\">\n          <Header />\n          <Photolist />\n        </Route>\n\n        <Route path='/info'>\n          <Modal children={<Info />}/>\n        </Route>\n\n        {/* Redirect to the photo list view */}\n        <Route exact path='/photos'>\n          <Redirect to='/'/>\n        </Route>\n\n        <Route path='/photos/:photoId'>\n          <Photo photoId={param}/>\n        </Route>\n\n        <Route path='/photographer/:username'>\n          <Photographer username={param}/>\n        </Route>\n\n        <Route path='*' >\n          <NoMatch />\n        </Route>\n\n      </Switch>\n\n      {/* Modal view on top of background if background is set */}\n      {background && <Route path='/info'><Modal children={<Info />}/></Route>}\n\n    </div>\n  );\n};\n\nexport default RootRoutes;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Navigation from './components/header/navigation/Navigation';\nimport RootRoutes from './RootRoutes';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navigation />\n        <RootRoutes />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}