{"version":3,"sources":["redux/photolistSlice.ts","redux/photoSlice.ts","redux/rootReducer.ts","store.ts","components/header/navigation/Navigation.tsx","components/photolist/thumbnail/Thumbnail.tsx","components/photolist/showMore/ShowMore.tsx","components/photolist/Photolist.tsx","components/header/modal/Modal.tsx","components/header/info/Info.tsx","components/photo/photoMeta/PhotoMeta.tsx","components/photo/userIntro/UserIntro.tsx","components/photo/Photo.tsx","components/header/Header.tsx","RootRoutes.tsx","App.tsx","index.tsx"],"names":["fetchPhotos","createAsyncThunk","pageNumber","a","axios","get","params","page","response","newPhotos","data","map","item","alt_description","id","urls","thumb","photolistSlice","createSlice","name","initialState","photolist","status","error","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","console","log","payload","Array","isArray","concat","rejected","fetchPhoto","photoId","date","Date","created_at","createdAt","toLocaleString","newPhoto","full","regular","user","profile_image","small","username","photoSlice","photo","rootReducer","combineReducers","photolistReducer","photoReducer","store","configureStore","reducer","Navigation","location","useLocation","atRoot","pathname","to","className","background","InfoCircleOutlined","Thumbnail","thumbUrl","alt","src","ShowMore","handleShowMore","onClick","photoCount","Photolist","dispatch","useDispatch","photos","useSelector","photosStatus","useEffect","LoadingOutlined","Modal","children","history","useHistory","modalRef","useRef","closeModal","replace","handleClickOutside","e","current","contains","target","document","addEventListener","removeEventListener","keyListener","keyCode","role","aria-modal","ref","Info","href","rel","PhotoMeta","fullUrl","UserIntro","userImgUrl","userRealName","Photo","photoStatus","regularUrl","Header","RootRoutes","pathElements","split","length","pop","exact","path","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.26c21db5.chunk.js","sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\ninterface PhotolistState {\n  photolist: any, //[],\n  status: 'idle' | 'loading' | 'succeeded' | 'failed',\n  page: number,\n  error: any //string | null\n}\n\nconst initialState = {\n  photolist: [],\n  page: 1,\n  status: 'idle',\n  error: null,\n} as PhotolistState;\n\n/* Fetch photos from API\n * Generated action types will start with 'photos/fetchPhotos'\n */\nexport const fetchPhotos = createAsyncThunk('photos/fetchPhotos', async (pageNumber: number) => {\n  const response = await axios.get('/photos', {\n    params: {\n      page: pageNumber\n    }\n  });\n\n  const newPhotos = response.data.map((item: any) => (\n    {\n      'alt': item.alt_description,\n      'photoId': item.id,\n      'thumbUrl': item.urls.thumb,\n    }\n  ));\n  return newPhotos;\n});\n\n/*\n *\n */\nconst photolistSlice = createSlice({\n  name: 'photolist',\n  initialState,\n  reducers: {},\n  // Use \"builder callback\" syntax as it is recommended with TypeScript\n  extraReducers: builder => {\n    builder\n    .addCase(fetchPhotos.pending, (state, action) => {\n      state.status = 'loading';\n      state.error = null;\n    })\n    .addCase(fetchPhotos.fulfilled, (state, action) => {\n      console.log('fulfilled action: ', action.payload);\n      // Photo fetching was successfull if the action payload is an array\n      if (Array.isArray(action.payload)) {\n        // Update store state: status tells that the fetch succeeded, page tells the next page\n        // to be fetched and photos is the place for photos\n        state.status = 'succeeded';\n        state.page = state.page + 1;\n        state.photolist = state.photolist.concat(action.payload);\n      } else {\n        // If action payload is something else than an array, fetch failed\n        state.status = 'failed';\n        state.error = 'Could not load photos.';\n        //state.error = action.payload;\n      }\n    })\n    .addCase(fetchPhotos.rejected, (state, action) => {\n      console.log('failed action: ', action);\n      state.status = 'failed';\n      state.error = 'Could not load photos.';\n      //state.error = action.payload;\n    })\n  },\n});\n\nexport default photolistSlice.reducer;","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\ninterface PhotoState {\n  photoId: string,\n  // TODO\n  photo: any,\n  status: 'idle' | 'loading' | 'succeeded' | 'failed',\n  error: any //string | null\n}\n\nconst initialState = {\n  photoId: '',\n  photo: {},\n  status: 'idle',\n  error: null,\n} as PhotoState;\n\n/* Fetch a single photo from API\n * Generated action types will start with 'photo/fetchPhoto'\n */\nexport const fetchPhoto = createAsyncThunk('photo/fetchPhoto', async (photoId: string) => {\n  const response = await axios.get(`/photos/${photoId}`);\n  const data = response.data;\n\n  const date = new Date(data.created_at);\n  const createdAt = date.toLocaleString('en-BG');\n\n  const newPhoto = {\n    'alt': data.alt_description,\n    'createdAt': createdAt,\n    'fullUrl': data.urls.full,\n    'photoId': data.id,\n    'regularUrl': data.urls.regular,\n    'thumbUrl': data.urls.thumb,\n    'userId': data.user.id,\n    'userImgUrl': data.user.profile_image.small,\n    'userRealName': data.user.name,\n    'username': data.user.username\n  };\n\n  return newPhoto;\n});\n\n/*\n *\n */\nconst photoSlice = createSlice({\n  name: 'photo',\n  initialState,\n  reducers: {},\n  // Use \"builder callback\" syntax as it is recommended with TypeScript\n  extraReducers: builder => {\n    builder\n    .addCase(fetchPhoto.pending, (state, action) => {\n      state.status = 'loading';\n      state.error = null;\n    })\n    .addCase(fetchPhoto.fulfilled, (state, action) => {\n      console.log('fulfilled action: ', action);\n      // Update store state: status tells that the fetch succeeded, photoId is the id of the fetched\n      // photo and photo contains all the necessary info of the photo\n      state.status = 'succeeded';\n      state.photoId = action.payload.photoId;\n      state.photo = action.payload;\n    })\n    .addCase(fetchPhoto.rejected, (state, action) => {\n      console.log('failed action: ', action);\n      state.status = 'failed';\n      state.error = 'Could not load photo.';\n    })\n  },\n});\n\nexport default photoSlice.reducer;","import { combineReducers } from '@reduxjs/toolkit';\nimport photolistReducer from './photolistSlice';\nimport photoReducer from './photoSlice';\n\nexport const rootReducer = combineReducers({\n  photolist: photolistReducer,\n  photo: photoReducer\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { rootReducer } from './redux/rootReducer';\n\nconst store = configureStore({ reducer: rootReducer });\n\nexport default store;\n\nexport type RootState = ReturnType<typeof store.getState>\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport { InfoCircleOutlined } from '@ant-design/icons';\n\nimport './Navigation.scss';\n\nconst Navigation: React.FC = () => {\n  const location = useLocation();\n  const atRoot = location.pathname === '/';\n\n  return (\n    <nav>\n      <Link to='/'\n        className='home'\n      >\n        Photoinsp\n      </Link>\n      {atRoot &&\n      <Link to={{\n        pathname: '/info',\n        state: { background: location }\n        }}\n        className='info'\n      >\n        <InfoCircleOutlined />\n      </Link>\n      }\n    </nav>\n  );\n}\n\nexport default Navigation;","import React from 'react';\n\nimport './Thumbnail.scss';\n\n// TODO All the info as props or fetched from store directly by photoId\nconst Thumbnail: React.FC<{photoId: string, thumbUrl: string, alt: string}>\n  = ({ photoId, thumbUrl, alt }) => {\n  return (\n    <img src={thumbUrl} alt={alt} className='thumbnail'/>\n  );\n}\n\nexport default Thumbnail;","import React from 'react';\n\nimport './ShowMore.scss';\n\nconst ShowMore: React.FC<{handleShowMore: Function}> = ({ handleShowMore }) => {\n  return (\n    <div className='show-more'>\n      <button onClick={() => handleShowMore()} className='show-more-button'>Show more</button>\n    </div>\n  );\n}\n\nexport default ShowMore;","import React, { useEffect } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchPhotos } from '../../redux/photolistSlice';\nimport { RootState } from '../../redux/rootReducer';\n\nimport { Link } from 'react-router-dom';\n\nimport Thumbnail from './thumbnail/Thumbnail';\nimport ShowMore from './showMore/ShowMore';\n\nimport { LoadingOutlined } from '@ant-design/icons';\nimport './Photolist.scss';\n\n/*\n * Helper variable and function to create unique keys to photo thumbnails.\n * Photo id:s can't be used as keys because data in Unsplash updates often and\n * same photos can be fetched multiple times if the app is left open and after\n * some time the user continues browsing where they left\n */\nlet photoCount = 1;\nconst giveKey = () => {\n  photoCount = photoCount + 1;\n  return photoCount;\n};\n\nconst Photolist: React.FC = () => {\n  const dispatch = useDispatch();\n  \n  const photos = useSelector((state: RootState) => state.photolist.photolist);\n  const photosStatus = useSelector((state: RootState) => state.photolist.status);\n  const pageNumber = useSelector((state: RootState) => state.photolist.page);\n  const error = useSelector((state: RootState) => state.photolist.error);\n\n  useEffect(() => {\n    // Only fetch initial list of photos once\n    if (photosStatus === 'idle') {\n      dispatch(fetchPhotos(pageNumber));\n    }\n  }, [photosStatus, pageNumber, dispatch]);\n\n  // Dispatch action to fetch photos\n  const handleShowMore = () => {\n    dispatch(fetchPhotos(pageNumber));\n  };\n\n  return (\n    <div>\n      <div className='flex-container'>\n        {photos.map((photo: any) =>\n        <Link\n          key={giveKey()}\n          to={{pathname: `/photos/${photo.photoId}`}}\n          className='flex-item'\n        >\n          <Thumbnail photoId={photo.photoId} thumbUrl={photo.thumbUrl} alt={photo.alt} />\n        </Link>\n        )}\n      </div>\n\n      {photosStatus === 'loading' &&\n      <LoadingOutlined className='loading'/>}\n\n      {photosStatus === 'succeeded' &&\n      <ShowMore handleShowMore={handleShowMore} />}\n\n      {photosStatus === 'failed' &&\n      <div className='error'>\n        {error}\n      </div>}\n\n    </div>\n  );\n}\n\nexport default Photolist;\n","import React, { useEffect, useRef } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport './Modal.scss';\n\n/*\n * TODO\n * 1) Trap focus in modal: https://tinloof.com/blog/how-to-create-an-accessible-react-modal/\n * 2) Use Portal to place the modal in the right place in DOM tree (after navigation bar).\n *    This is necessary so that keyboard focus will be in logical place when modal opens.\n *    Now the modal is at the end of the page. Make sure you can still send link to /info\n *    and that works with Portal.\n *    https://levelup.gitconnected.com/lets-build-a-functional-reusable-modal-component-in-react-with-portals-edff0b8d4bf7\n */\n\nconst Modal: React.FC = ({ children }) => {\n  let history = useHistory();\n  // TODO: read again this https://www.carlrippon.com/react-refs-typescript/\n  const modalRef = useRef<HTMLInputElement>(null);\n\n  /* Close modal by navigating to the root */\n  const closeModal = () => {\n    history.replace({pathname: '/'})\n  };\n\n  /* If mouse is clicked outside modal, close modal */\n  const handleClickOutside = (e: any) => {\n    if (modalRef.current !== null && (!modalRef.current.contains(e.target))) {\n      closeModal();\n    }\n  };\n\n  /* Close modal if mouse clicked outside of it */\n  useEffect(() => {\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  });\n\n  /* Close modal with ESC (keycode 27) */\n  useEffect(() => {\n    function keyListener(e: any) {\n      if (e.keyCode === 27) {\n        closeModal();\n      }\n    }\n    document.addEventListener('keydown', keyListener);\n    return () => document.removeEventListener('keydown', keyListener);\n  });\n\n  return (\n    <div className='modal-bg' role='dialog' aria-modal='true'>\n      <div ref={modalRef} className='modal-wrapper'>\n        <button onClick={() => closeModal()} className='close'>X</button>\n        {children}\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;\n","import React from 'react';\n\nimport './Info.scss';\n\nconst Info: React.FC = () => {\n  return (\n    <div className='info-content'>\n      <h3>What is this?</h3>\n      <p>\n        This app is created for you to enjoy beautiful photographs shared by people from\n        all around the world.\n      </p>\n      <p>\n        Here you can calm down and focus on the essential - the photographs.\n        There are no notifications or anything else that could distract you.\n      </p>\n      <h3>Whose photos are these?</h3>\n      <p>\n        This app fetches data from\n        {' '}\n        <a href='https://unsplash.com/developers' target='_blank' rel='noreferrer'>\n          Unsplash API\n        </a>. Every photo view has a link to the original full-sized photo.\n      </p>\n      <h3>Who made this?</h3>\n      <p>\n        The app is created by a hobbyist web developer\n        {' '}\n        <a href='https://github.com/nellileinonen' target='_blank'  rel='noreferrer'>\n          Nelli Leinonen\n        </a>.\n        {' '}\n        Source code on\n        {' '}\n        <a href='https://github.com/nellileinonen/photoinsp' target='_blank' rel='noreferrer'>\n          GitHub\n        </a>.\n      </p>\n    </div>\n  );\n}\n\nexport default Info;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../redux/rootReducer';\nimport './PhotoMeta.scss';\n\nconst PhotoMeta: React.FC = () => {\n  const createdAt = useSelector((state: RootState) => state.photo.photo.createdAt);\n  const fullUrl = useSelector((state: RootState) => state.photo.photo.fullUrl);\n\n  return (\n    <div className='photo-meta'>\n      {createdAt}\n      <br/>\n      <a href={fullUrl} target='_blank' rel='noreferrer'>Full-sized</a>\n    </div>\n  );\n}\n\nexport default PhotoMeta;","import React from 'react';\n\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../redux/rootReducer';\n\nimport './UserIntro.scss';\n\nconst UserIntro: React.FC = () => {\n  const userImgUrl = useSelector((state: RootState) => state.photo.photo.userImgUrl);\n  const userRealName = useSelector((state: RootState) => state.photo.photo.userRealName);\n  const username = useSelector((state: RootState) => state.photo.photo.username);\n\n  return (\n    <div className='user-intro'>\n      <div>\n        <img src={userImgUrl} alt='' className='user-img'/>\n      </div>\n      <div className='user-name'>\n        <p>\n          {userRealName}\n          <br/>\n          Username: {username}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default UserIntro;","import React, { useEffect } from 'react';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchPhoto } from '../../redux/photoSlice';\nimport { RootState } from '../../redux/rootReducer';\n\nimport PhotoMeta from './photoMeta/PhotoMeta';\nimport UserIntro from './userIntro/UserIntro';\n\nimport { LoadingOutlined } from '@ant-design/icons';\nimport './Photo.scss';\n\nconst Photo: React.FC<{photoId: string}> = ({ photoId }) => {\n  const dispatch = useDispatch();\n\n  const photo = useSelector((state: RootState) => state.photo.photo);\n  const photoStatus = useSelector((state: RootState) => state.photo.status);\n  const error = useSelector((state: RootState) => state.photo.error);\n\n  useEffect(() => {\n    dispatch(fetchPhoto(photoId));\n  }, [dispatch, photoId]);\n\n  return (\n    <div className='photo-view'>\n      {photoStatus === 'loading' &&\n      <LoadingOutlined className='loading'/>}\n\n      {photoStatus === 'succeeded' &&\n      <>\n        <img src={photo.regularUrl} alt={photo.alt} className='regular-photo'/>\n        <PhotoMeta />\n        <UserIntro />\n      </>}\n\n      {photoStatus === 'failed' &&\n      <div className='error'>{error}</div>}\n    </div>\n  );\n}\n\nexport default Photo;","import React from 'react';\n\nimport './Header.scss';\n\nconst Header: React.FC = () => {\n  return (\n    <header>\n      <h1>Photoinsp</h1>\n      <h2>Browse photos, relax and get inspired</h2>\n      <div className='divider'>\n        <span className='line'></span>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;","import React from 'react';\nimport { Route, Switch, useLocation } from 'react-router-dom';\n\nimport Photolist from './components/photolist/Photolist';\nimport Modal from './components/header/modal/Modal';\nimport Info from './components/header/info/Info';\nimport Photo from './components/photo/Photo';\nimport Header from './components/header/Header';\n\nconst RootRoutes = () => {\n  // TODO: use proper type\n  let location: any = useLocation();\n  let background = location.state && location.state.background;\n\n  /* !! SOS !! This is dangerous and stupid !! SOS !! */\n  //console.log('location in rootroutes: ', location);\n  let photoId = '';\n  const pathElements = location.pathname.split('/');\n  if (pathElements.length === 3 && pathElements[1] === 'photos') {\n    photoId = pathElements.pop();\n  }\n\n  return (\n    <div>\n      <Switch location={background || location}>\n        <Route exact path=\"/\">\n          <Header />\n          <Photolist />\n        </Route>\n        <Route path='/info'>\n          <Modal children={<Info />}/>\n        </Route>\n        <Route path='/photos/:photoId'>\n          <Photo photoId={photoId}/>\n        </Route>\n      </Switch>\n\n      {/* Modal view on top of background if background is set */}\n      {background && <Route path='/info'><Modal children={<Info />}/></Route>}\n\n    </div>\n  );\n};\n\nexport default RootRoutes;\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport './App.scss';\nimport Navigation from './components/header/navigation/Navigation';\nimport RootRoutes from './RootRoutes';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Navigation />\n        <RootRoutes />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}